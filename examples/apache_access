#!/bin/bash
#
# Example script for demonstrate Dasp working (at example of Apache logs)
#
# Style guide: https://google.github.io/styleguide/shell.xml

main (){

  local show \
        res \
        arg

  # Execute dasp and store results into variable

  res="$(../dasp \
    -s ../test/mock_regular_date/ \
    -t ~/.dasp~ \
    -f "access*" \
    -d " " \
    -w "[%d/%b/%Y:%H:%M:%S" \
    -k 4 \
    -o 2 \
    "$1" "$2")"

  # Loop throught arguments to get additional commands 

  show=''
  for arg in "$@"
  do

    case "${arg}" in
      req_all)
        echo "Requests all from \"$1\" to \"$2\":"
        echo "${res}" | wc -l
        ;;
      req_per_day)
        echo "Requests per day from \"$1\" to \"$2\":"
        echo "${res}" | awk '{print $4}' | cut -d: -f1 | uniq -c
        ;;
      req_per_hour)
        echo "Requests per hour from \"$1\" to \"$2\":"
        echo "${res}" | cut -d[ -f2 | cut -d] -f1 | awk -F: '{print $2":00"}' | sort -n | uniq -c
        ;;
      short)
        res=$(echo "${res}" | awk '{ print $1 FS $4 FS $7 }')
        show='true'
        ;;
      all)
        show='true'
    esac

  done

  # If user request the output of dasp
  
  [[ -n "${show}" ]] && echo "${res}"
  
}

main "$@"

#./dasp_debug_exec "2017-02-20" "2017-02-23" req_all req_per_day req_per_hour
#./dasp_debug_exec "2017-02-23 18:00:00" "2017-02-23 18:30:30" req_all short
#./dasp_debug_exec "2 hours ago" "now" short
#./dasp_debug_exec "4 days ago" "now" short | tac
