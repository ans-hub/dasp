#!/bin/bash
#
# Data spider - is performing getting data for defined period from any data source
#
# Style guide: https://google.github.io/styleguide/shell.xml

function fx_usage() {

  echo "Usage: dasp [options]... [date_start] [date_end] (optional)
  
  Main flags:
    -s (--sdata-path)       - path to source data directory
    -f (--sdata-fname)      - source data filename pattern            
    -w (--awk-date-format)  - date format, used in current source data
    -k (--awk-date-field)   - field in source data, contains date-time, in awk terms
    -d (--awk-field-sep)    - fields separator in source dated
    -M (--months-custom)    - custom months, delimeted by eleven ','
    -o (--date-offset)      - increase day +- while search files
    -b (--output-debug)     - debug data destination (optional)
    -t (--tmp-file)         - use temp file for awk work instead of var (optional)
    -p (--pipe-output)      - pipe output with custom commands (optional)

  Date flags:
    - set in any format recognized by \$(date) command
    
  Example for apache logs:
    1) alias dasp_apache_access='dasp -s ~/logs ' -d " " -f '*access*log' -o 1 -k 4 -w '[D/M/Y:h:m:s' -m '%b'
    2) dasp_apache_access \"yesterday 14:00\" \"now\"
    3) dasp_apache_access -n control_file

  Version: 1.00

    " \
  | sed 's/^\s\s//' 1>&2

  exit 1

}

function sys_error() {
  [[ "$@" ]] && echo "error: $@" >&2
  critical_error_flag="1"
}

function sys_debug() {
  [[ "${DEBUG}" == 'true' ]] && echo -e "debug: $@" >&2
}

function sys_is_abort() {
  if [[ "${critical_error_flag}" == 1 ]]; then
    echo "tip: type ./dasp -h for usage"
    echo "exit"
    exit 1
  fi
}

# Solution from http://stackoverflow.com/a/697552/7489927
  
function sys_workdir() {

  local source \
        dir

  source="${BASH_SOURCE[0]}"

  while [ -h "$source" ]; do
      dir="$( cd -P "$( dirname "$source" )" && pwd )"
      source="$( readlink "$source" )"
      [[ $source != /* ]] && source="$dir/$source"
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"
  
  echo "$dir"
  sys_debug "script dir: ${dir}"
}

# Set default values before iterating throught options

function fx_define_vars() {

  critical_error_flag=''
  DEBUG='false'

  TMP_FILE=''

  DATE_START=''
  DATE_END='now'
  
  DATE_OFFSET=''

  SRC_DATE_FORMAT=''
  SRC_DATE_FIELD=''
  
  SRC_DATA_FNAME=''
  SRC_DATA_PATH=''
  SRC_DATA_SEPAR=''
  
  MONTHS_CUSTOM=''
  PIPE=''
  
}

function fx_getopts() {

  local OPTIND \
        flag

  # Get main options

  while getopts 'bhw:k:f:d:s:m:M:o:t:p:' flag
  do
    case "${flag}" in
    
      b) DEBUG='true' ;;
      t)
         TMP_FILE="${OPTARG}"
         [[ -d "${TMP_FILE}" ]] && sys_error 'Option -t - should be not path'
         truncate --size 0 "${TMP_FILE}" >&2 || sys_error 'Option -t - can`t create file'
         ;;

      w) 
         SRC_DATE_FORMAT="${OPTARG}" 
         if   [[ "${SRC_DATE_FORMAT}" =~ "%m" ]]; then MONTHS_CUSTOM="01,02,03,04,05,
                                                                06,07,08,09,10,
                                                                11,12";
         elif [[ "${SRC_DATE_FORMAT}" =~ "%b" ]]; then MONTHS_CUSTOM="Jan,Feb,Mar,Apr,
                                                                May,Jun,Jul,Aug,
                                                                Sep,Oct,Nov,Dec";
         elif [[ "${SRC_DATE_FORMAT}" =~ "%B" ]]; then MONTHS_CUSTOM="January,Febrary,
                                                                Marth,April,May,
                                                                June,Jule,August,
                                                                September,October,
                                                                November,December";
         elif [[ "${SRC_DATE_FORMAT}" =~ "%s" ]]; then MONTHS_CUSTOM="01,02,03,04,05,
                                                                06,07,08,09,10,
                                                                11,12";
         else
           sys_error 'Option -w - can not recognize months format in date format';
         fi
         ;; 

      k) SRC_DATE_FIELD="${OPTARG}" ;;
      f) SRC_DATA_FNAME="${OPTARG}" ;;
      d) SRC_DATA_SEPAR="${OPTARG}" ;;

      s)
         SRC_DATA_PATH="${OPTARG}"
         [[ ! -d "${SRC_DATA_PATH}" ]] && sys_error 'Option -s - path is not exists' 
         ;;

      M)
         MONTHS_CUSTOM="${OPTARG}"
         if [[ $(echo "${MONTHS_CUSTOM}" | grep -o "," | wc -l) != 11 ]]; then
           sys_error 'Option -M - count of custom months must be 12 over ","'
         fi
         ;;

      o)
         DATE_OFFSET="${OPTARG}"
         [[ ! "${DATE_OFFSET}" =~ ^[-+]?[0-9]+$ ]] && sys_error 'Option -o - isn`t digit' ;;

      p) PIPE="${OPTARG}" ;;

      h) fx_usage ;;
      ?) sys_error ;;

    esac
  done
  
  sys_debug "script parametrs: $@";

  # Get dates

  shift "$((OPTIND-1))"

  [[ -n "$1" ]] && DATE_START="$1"
  [[ -n "$2" ]] && DATE_END="$2"

  # Throw error if no options are passed

  # sys_debug "$#"
  # if [[ "$#" -eq 0 ]]; then fx_usage; fi

}

function fx_define_const() {

  readonly TMP_FILE
  
  readonly DEBUG

  readonly DATE_START
  readonly DATE_END
  
  readonly DATE_OFFSET

  readonly SRC_DATE_FORMAT
  readonly SRC_DATE_FIELD
  
  readonly SRC_DATA_FNAME
  readonly SRC_DATA_PATH
  readonly SRC_DATA_SEPAR
  
  readonly MONTHS_CUSTOM
  readonly PIPE

}

function fx_check_required_options() {
  
  # Check other required options

  [[ -z "${SRC_DATE_FORMAT}" ]] && sys_error 'Option -w is required'
  [[ -z "${SRC_DATE_FIELD}" ]] && sys_error 'Option -k is required'
  [[ -z "${SRC_DATA_FNAME}" ]] && sys_error 'Option -f is required'
  [[ -z "${SRC_DATA_SEPAR}" ]] && sys_error 'Option -d is required'
  [[ -z "${SRC_DATA_PATH}" ]] && sys_error 'Option -s is required'
  
  # Check required dates options

  [[ -z "${DATE_OFFSET}" ]] && sys_error 'Option -o is required'
  [[ -z "${DATE_START}" ]] && sys_error '\$1 as date_start is required'
  [[ -z "${DATE_END}" ]] && sys_error '\$2 as date_end is required'

  # Clear tmp file and check avialabilities to write

  if [[ ! -z "${TMP_FILE}" ]]; then
    sys_debug "Use ${TMP_FILE} temp file"
    truncate --size 0 "${TMP_FILE}" >&2 || sys_error 'Option -t - can`t create file'
  else
    sys_debug "Work without temp file"
  fi
  
}

function fx_check_dates_format() {

  date -d "$DATE_START" > /dev/null 2>&1
  [[ $(echo "$?") != 0 ]] && sys_error 'Start date format is not recognized'
    
  date -d "$DATE_END" > /dev/null 2>&1
  [[ $(echo "$?") != 0 ]] && sys_error 'End date format is not recognized'

  # Check here pipe commands

}

function fx_find_files() {

  local find_start \
        find_end \
        res_find \
        res_test \
        err_code

  # Prepare dates for find command
  
  find_start="$(date -d "$(date -d "${DATE_START}" +%F) -${DATE_OFFSET}days" +%Y-%m-%d)"
  find_end="$(date -d "$(date -d "${DATE_END}" +%F) +${DATE_OFFSET}days" +%Y-%m-%d)"
  
  # Find files between two dates and sort results by modification date

  res_find="$(find ${SRC_DATA_PATH} \
    -type f \
    -name "${SRC_DATA_FNAME}" \
    -newermt "${find_start} 00:00:00" ! -newermt "${find_end} 23:59:59" \
    -exec ls -1rt "{}" +;)"
    
  [[ -n "${res_find}" ]] && res_test="$(cat ${res_find} | wc -l)" || res_test="0"
  
  # Save data to debug channel
  
  err_code="$?"

  if [[ "${err_code}" -ne 0 ]]; then
    sys_error "Find command exits with code ${err_code}"
  else
    sys_debug "records in find: ${res_test}";
    echo "${res_find}"
  fi

}


function fx_filter_data() { 

  local i \
        content \
        current_file \
        files_list \
        awk_format \
        awk_start \
        awk_end \
        func_begin \
        func_main \
        func_compare

  # Prepare variables

  files_list="$1"
  
  # Prepare dates for awk command 

  awk_format="$(echo "${SRC_DATE_FORMAT}" | sed "s/%b/%m/" | sed "s/%B/%m/")"
  awk_start="$(date -d "${DATE_START}" "+${awk_format}")"
  awk_end="$(date -d "${DATE_END}" "+${awk_format}")"

  # Iterate throught files_list 
  i=0

  while IFS= read -r current_file
  do
    sys_debug "reading ${i} ${current_file}"

    if [[ -n "${TMP_FILE}" ]]; then
      awk \
      -v DATE_START="${awk_start}" \
      -v DATE_END="${awk_end}" \
      -v DATE_FORMAT="${awk_format}" \
      -v DATE_FIELD="${SRC_DATE_FIELD}" \
      -v MONTHS_CUSTOM="${MONTHS_CUSTOM}" \
      -v DEBUG="${DEBUG}" \
      -F "${SRC_DATA_SEPAR}" \
      -f "$(sys_workdir)/dasp.awk" \
      ${current_file} >> ${TMP_FILE}
    
    else
    
      content="$(awk \
      -v DATE_START="${awk_start}" \
      -v DATE_END="${awk_end}" \
      -v DATE_FORMAT="${awk_format}" \
      -v DATE_FIELD="${SRC_DATE_FIELD}" \
      -v MONTHS_CUSTOM="${MONTHS_CUSTOM}" \
      -v DEBUG="${DEBUG}" \
      -F "${SRC_DATA_SEPAR}" \
      -f "$(sys_workdir)/dasp.awk" \
      ${current_file})"

      # Show output if awk work without tmp file

      [[ -n "${content}" ]] && echo "${content}" && content=''

    fi

    let i++

  done <<< "${files_list}"

  # Show output if awk work with tmp file

  [[ -n "${TMP_FILE}" ]] && cat "${TMP_FILE}"

}

function main() {

  local files_list \
        records \
        time_0 \
        time_1 \
        time_2 \
        time_3 \
        time_res

  # Define necessary options, vars and constants

  fx_define_vars
  fx_getopts "$@"
  fx_define_const

  fx_check_required_options
  sys_is_abort

  fx_check_dates_format
  sys_is_abort

  # Get list of files in dates range

  files_list="$("fx_find_files")"
  readonly files_list
  sys_is_abort

  # Filter records in files with dates range

  fx_filter_data "${files_list}"

}

main "$@"