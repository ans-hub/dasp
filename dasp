#!/bin/bash
#
# Data spider - is performing getting data for defined period
# from any data source
#
# Style guide: https://google.github.io/styleguide/shell.xml
#
#_______________________________________________________________

# SYSTEM FUNCTIONS

function sys_usage() {

  echo "Usage: dasp [options]... [date_start] [date_end]
  
  Flags:
    ${TIP_OPTION_s}
    ${TIP_OPTION_f}
    ${TIP_OPTION_w}
    ${TIP_OPTION_k}
    ${TIP_OPTION_d}
    ${TIP_OPTION_M}
    ${TIP_OPTION_o}
    ${TIP_OPTION_b}
    ${TIP_OPTION_t}
    ${TIP_OPTION_h}

  Arguments:
    ${TIP_OPTION_date}

  Version: ${TIP_OPTION_ver}" \
  | sed 's/^\s\s//' 1>&2

  exit 1
}

function sys_description() {
  echo "Description: dasp provides get data for date range from text sources
  For usage call: dasp -h" \
  | sed 's/^\s\s//' 1>&2

  exit 1
}

function sys_error() {
  [[ "$@" ]] && echo "err: $@" >&2
  critical_error_flag="1"
}

function sys_tip() {
  [[ "$@" ]] && echo "tip: $@" >&2
}

function sys_debug() {
  [[ "${DEBUG}" == 'true' ]] && echo -e "dbg: $@" >&2
}

function sys_is_abort() {
  if [[ "${critical_error_flag}" == 1 ]]; then
    echo "tip: type ./dasp -h for usage"
    echo "exit"
    exit 1
  fi
}

# OPTIONS AND DEFINING FUNCTIONS

function sys_workdir() {
  
  # Solution from http://stackoverflow.com/a/697552/7489927

  local source \
        dir

  source="${BASH_SOURCE[0]}"

  while [ -h "$source" ]; do
      dir="$( cd -P "$( dirname "$source" )" && pwd )"
      source="$( readlink "$source" )"
      [[ $source != /* ]] && source="$dir/$source"
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"
  
  echo "$dir"
  sys_debug "script dir: ${dir}"
}

function fx_define_vars() {

  TIP_OPTION_s="-s (--sdata-path)       - path to source data directory"
  TIP_OPTION_f="-f (--sdata-fname)      - source data filename pattern"
  TIP_OPTION_w="-w (--awk-date-format)  - date format, used in current source data"
  TIP_OPTION_k="-k (--awk-date-field)   - field in source data, contains date-time, in awk terms"
  TIP_OPTION_d="-d (--awk-field-sep)    - fields separator in source dated"
  TIP_OPTION_M="-M (--months-custom)    - custom months, delimeted by eleven ','"
  TIP_OPTION_o="-o (--date-offset)      - increase day +- while search files"
  TIP_OPTION_b="-b (--output-debug)     - debug data destination (optional)"
  TIP_OPTIOM_h="-h (--help)             - show this info"
  TIP_OPTION_t="-t (--tmp-file)         - use temp file for awk work instead of var (optional)"
  
  TIP_OPTION_date="-\$1 & \$2 sets in any format recognized by \$(date) command"
  TIP_OPTION_ver="1.00"

  critical_error_flag=''
  DEBUG='false'

  TMP_FILE=''

  DATE_START=''
  DATE_END=''
  
  DATE_OFFSET=''

  SRC_DATE_FORMAT=''
  SRC_DATE_FIELD=''
  
  SRC_DATA_FNAME=''
  SRC_DATA_PATH=''
  SRC_DATA_SEPAR=''
  
  MONTHS_CUSTOM=''
  PIPE=''
  
}

function fx_getopts() {

  local OPTIND \
        flag

  # Throw to description if no options are passed

  if [[ -z "$@" ]]; then
    sys_description
  fi

  # Get main options

  while getopts 'bhw:k:f:d:s:m:M:o:t:p:' flag
  do
    case "${flag}" in
    
      b) DEBUG='true' ;;
      t) TMP_FILE="${OPTARG}" ;;
      
      k) SRC_DATE_FIELD="${OPTARG}" ;;
      f) SRC_DATA_FNAME="${OPTARG}" ;;
      d) SRC_DATA_SEPAR="${OPTARG}" ;;
      w) SRC_DATE_FORMAT="${OPTARG}" ;;
      s) SRC_DATA_PATH="${OPTARG}" ;;
      M) MONTHS_CUSTOM="${OPTARG}" ;;
      o) DATE_OFFSET="${OPTARG}" ;;

      h) sys_usage ;;
      ?) sys_error ;;

    esac
  done
  
  sys_debug "script parametrs: $@";

  # Get dates

  shift "$((OPTIND-1))"

  [[ -n "$1" ]] && DATE_START="$1"
  [[ -n "$2" ]] && DATE_END="$2"

}

function fx_define_const() {

  readonly TMP_FILE
  
  readonly DEBUG

  readonly DATE_START
  readonly DATE_END
  
  readonly DATE_OFFSET

  readonly SRC_DATE_FORMAT
  readonly SRC_DATE_FIELD
  
  readonly SRC_DATA_FNAME
  readonly SRC_DATA_PATH
  readonly SRC_DATA_SEPAR
  
  readonly MONTHS_CUSTOM
  readonly PIPE

}

function fx_check_required_options() {
  
  # Check other required options

  [[ -z "${SRC_DATE_FORMAT}" ]] && sys_error 'option -w is required' \
                                && sys_tip "${TIP_OPTION_w}"
  [[ -z "${SRC_DATE_FIELD}" ]]  && sys_error 'option -k is required' \
                                && sys_tip "${TIP_OPTION_k}"
  [[ -z "${SRC_DATA_FNAME}" ]]  && sys_error 'option -f is required' \
                                && sys_tip "${TIP_OPTION_f}"
  [[ -z "${SRC_DATA_SEPAR}" ]]  && sys_error 'option -d is required' \
                                && sys_tip "${TIP_OPTION_d}"
  [[ -z "${SRC_DATA_PATH}" ]]   && sys_error 'option -s is required' \
                                && sys_tip "${TIP_OPTION_s}"
  
  # Check required dates options

  [[ -z "${DATE_OFFSET}" ]] && sys_error 'Option -o is required' \
                            && sys_tip "${TIP_OPTION_o}"
  [[ -z "${DATE_START}" ]]  && sys_error '$1 as date_start is required' \
                            && sys_tip "${TIP_OPTION_date}"
  [[ -z "${DATE_END}" ]]    && sys_error '$2 as date_end is required' \
                            && sys_tip "${TIP_OPTION_date}"

  # Clear tmp file and check avialabilities to write

  if [[ ! -z "${TMP_FILE}" ]]; then

    if [[ -d "${TMP_FILE}" ]]; then
      sys_error 'Option -t - should be not path'
      sys_tip "${TIP_OPTION_t}"
    fi
    
    truncate --size 0 "${TMP_FILE}" 2>/dev/null
    if [[ "$?" != 0 ]]; then
      sys_error 'Option -t - can`t create file'
      sys_tip "${TIP_OPTION_t}"
    fi

    sys_debug "Use ${TMP_FILE} temp file"
  else
    sys_debug "Work without temp file"
  fi

  # Abort if critical errors are here, before next step

  sys_is_abort

  # Check other options for valid data

  if [[ ! -d "${SRC_DATA_PATH}" ]]; then
    sys_error 'Option -s - path is not exists'
    sys_tip "${TIP_OPTION_s}"
  fi

  if [[ ! "${DATE_OFFSET}" =~ ^[-+]?[0-9]+$ ]]; then
    sys_error 'Option -o - isn`t digit'
    sys_tip "${TIP_OPTION_o}"
  fi

  # Check and form custom months from date format

  if [[ -n ${MONTHS_CUSTOM} ]]; then

    if [[ $(echo "${MONTHS_CUSTOM}" | grep -o "," | wc -l) != 11 ]]; then
      sys_error 'Option -M - count of custom months must be 12 over ","'
      sys_tip "${TIP_OPTION_M}"
    fi

  else

    if   [[ "${SRC_DATE_FORMAT}" =~ "%m" ]]; then
      MONTHS_CUSTOM="01,02,03,04,05,06,07,08,09,10,11,12"
    elif [[ "${SRC_DATE_FORMAT}" =~ "%b" ]]; then
      MONTHS_CUSTOM="Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
    elif [[ "${SRC_DATE_FORMAT}" =~ "%s" ]]; then
      MONTHS_CUSTOM="01,02,03,04,05,06,07,08,09,10,11,12"
    elif [[ "${SRC_DATE_FORMAT}" =~ "%B" ]]; then
      MONTHS_CUSTOM="January,Febrary,Marth,April,May,June,Jule,August,September,October,
                                                                      November,December"
    else
      sys_error 'Option -w - can not recognize months format in date format'
      sys_tip "${TIP_OPTION_w}"
    fi
  
  fi
  
}

function fx_check_dates_format() {

  date -d "$DATE_START" > /dev/null 2>&1
  if [[ $(echo "$?") != 0 ]]; then
    sys_error 'Start date format is not recognized'
    sys_tip "${TIP_OPTION_date}"
  fi
  
  date -d "$DATE_END" > /dev/null 2>&1
  if [[ $(echo "$?") != 0 ]]; then
    sys_error 'End date format is not recognized'
    sys_tip "${TIP_OPTION_date}"
  fi

  date -d "now" "+${SRC_DATE_FORMAT}" > /dev/null 2>&1
  if [[ $(echo "$?") != 0 ]]; then
    sys_error 'Output date format is not recognized'
    sys_tip "${TIP_OPTION_w}"
  fi

}

# MAIN-PROGRAM FUNCTIONS

function fx_find_files() {

  local find_start \
        find_end \
        res_find \
        res_test \
        err_code

  # Prepare dates for find command
  
  find_start="$(date -d "$(date -d "${DATE_START}" +%F) -${DATE_OFFSET}days" +%Y-%m-%d)"
  find_end="$(date -d "$(date -d "${DATE_END}" +%F) +${DATE_OFFSET}days" +%Y-%m-%d)"
  
  # Find files between two dates and sort results by modification date

  res_find="$(find ${SRC_DATA_PATH} \
    -type f \
    -name "${SRC_DATA_FNAME}" \
    -newermt "${find_start} 00:00:00" ! -newermt "${find_end} 23:59:59" \
    -exec ls -1rt "{}" +;)"
    
  [[ -n "${res_find}" ]] && res_test="$(cat ${res_find} | wc -l)" || res_test="0"
  
  # Save data to debug channel
  
  err_code="$?"
  if [[ "${err_code}" -ne 0 ]]; then
    sys_error "Find command exits with code ${err_code}"
  else
    sys_debug "records in find: ${res_test}";
    echo "${res_find}"
  fi

}

function fx_get_data() { 

  local i \
        content \
        current_file \
        current_type \
        files_list \
        awk_format \
        awk_start \
        awk_end \
        func_begin \
        func_main \
        func_compare

    awk_cmd() {
      awk \
      -v DATE_START="${awk_start}" \
      -v DATE_END="${awk_end}" \
      -v DATE_FORMAT="${awk_format}" \
      -v DATE_FIELD="${SRC_DATE_FIELD}" \
      -v MONTHS_CUSTOM="${MONTHS_CUSTOM}" \
      -v DEBUG="${DEBUG}" \
      -F "${SRC_DATA_SEPAR}" \
      -f "$(sys_workdir)/dasp.awk"
    }

  # Prepare dates for awk command 

  files_list="$1"
  awk_format="$(echo "${SRC_DATE_FORMAT}" | sed "s/%b/%m/" | sed "s/%B/%m/")"
  awk_start="$(date -d "${DATE_START}" "+${awk_format}")"
  awk_end="$(date -d "${DATE_END}" "+${awk_format}")"

  # Iterate throught files_list 

  i=0

  while IFS= read -r current_file
  do
    # Sys counter and message

    let i++
    sys_debug "reading ${i} ${current_file}"

    # Determine file type and cat type
    
    current_type=$(file -b "${current_file}")
    if [[ ${current_type:0:4} == "gzip" ]]; then
      show_cmd="gunzip -c"
    else
      show_cmd="cat"
    fi

    # Cat file and pipe to awk command

    if [[ -n "${TMP_FILE}" ]]; then                       # tmp file
      $show_cmd ${current_file} | awk_cmd >> ${TMP_FILE}
    else                                                  # std out
      content="$(cat ${current_file} | awk_cmd )"
      [[ -n "${content}" ]] && echo "${content}" && content=''
    fi

  done <<< "${files_list}"

  # Show output if awk work with tmp file

  [[ -n "${TMP_FILE}" ]] && cat "${TMP_FILE}"

}

function main() {

  local files_list \
        records \
        time_0 \
        time_1 \
        time_2 \
        time_3 \
        time_res

  # Define necessary options, vars and constants

  fx_define_vars
  fx_getopts "$@"
  fx_check_required_options
  fx_define_const
  sys_is_abort

  fx_check_dates_format
  sys_is_abort

  # Get list of files in dates range

  files_list="$("fx_find_files")"
  readonly files_list
  sys_is_abort

  # Filter records in files with dates range

  fx_get_data "${files_list}"

}

main "$@"