#!/bin/bash
#
# Logs generator (LoGen) - perfom generating fake logs in format
# like "string string date string string" and so on
#
# Style guide: https://google.github.io/styleguide/shell.xml
#
#_______________________________________________________________

# INIT VARS AND CONST FUNCTIONS

function init_program_vars() {

  # Capsed vars in fx_getopt() will have been set as constants

  DEBUG='false'
  critical_error_flag=''

  DATE_START=''
  DATE_END=''

  DATE_FORMAT=''
  DATE_STEP=''

  OUTPUT_FNAME=''

  MOCK_FIELDS=''
  JSON='false'
}

function init_help_vars() {

  # Section contains constants for build help and tips while execute

  TIP_description="Logen (Logs generator) - bash script, provides generate fake logs in different
  formats to stdout or to files day by day for defined date range. For examples see
  /test directory and its scripts."

  TIP_OPTION_d="-d | date: format in \$(date) command format output (without first +)"
  TIP_OPTION_s="-s | date: iteration step (in seconds)"
  TIP_OPTION_o="-o | output to \"path/fname_prefix\" (optional)"
  TIP_OPTION_j="-j | output in json format (optional)"
  TIP_OPTION_g="-g | mock string if [count,lenght,separator,datepos] format"
  TIP_OPTION_b="-b | other: show debug info (optional)"
  TIP_OPTION_h="-h | other: show help info (optional)"  
  TIP_OPTION_date="-\$1 & \$2 sets in any format recognized by \$(date) command"
  
  TIP_ver="1.31"
  TIP_copyright="Ans Novoselov @ 2017"
  TIP_contact="http://ans.sh or ans.novoselov@gmail.com"

}

# SYSTEM FUNCTIONS

function sys_usage() {

  echo "Usage: logen [options]... [date_start] [date_end]
  
  Options:
    ${TIP_OPTION_d}
    ${TIP_OPTION_s}
    ${TIP_OPTION_g}
    ${TIP_OPTION_o}
    ${TIP_OPTION_j}
    ${TIP_OPTION_b}
    ${TIP_OPTION_e}
    ${TIP_OPTION_h}
  
  Positional parametrs:
    ${TIP_OPTION_date}

  Version:   ${TIP_ver}
  Contact:   ${TIP_contact}"\
  | sed 's/^\s\s//' 1>&2
  
  exit 1
}

function sys_description() {
  
  echo "${TIP_description}

  For usage call: logen -h

  Version:   ${TIP_ver}
  Contact:   ${TIP_contact}"\
  | sed 's/^\s\s//' 1>&2

  exit 1
}

function sys_error() {
  [[ "$@" ]] && echo "err: $@" >&2
  critical_error_flag="1"
}

function sys_tip() {
  [[ "$@" ]] && echo "tip: $@" >&2
}

function sys_debug() {
  [[ "${DEBUG}" == 'true' ]] && echo -e "dbg: $@" >&2
}

function sys_is_abort() {
  if [[ "${critical_error_flag}" == '1' ]]; then
    echo "tip: type ./logen -h for usage"
    echo "exit"
    exit 1
  fi
}

function sys_workdir() {
  
  # Solution from http://stackoverflow.com/a/697552/7489927

  local source \
        dir

  source="${BASH_SOURCE[0]}"

  while [ -h "$source" ]; do
      dir="$( cd -P "$( dirname "$source" )" && pwd )"
      source="$( readlink "$source" )"
      [[ $source != /* ]] && source="$dir/$source"
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"
  
  echo "$dir"
  sys_debug "script dir: ${dir}"
}

# OPTIONS AND CHECKING FUNCTIONS

function fx_getopts() {

  local OPTIND \
        flag
  
  # Throw to description if no options are passed

  if [[ -z "$@" ]]; then
    sys_description
  fi
  
  # Get options

  while getopts 'bhs:d:o:jg:' flag
  do
    case "${flag}" in
      
      b) DEBUG='true'
         readonly DEBUG
         ;;
      d) DATE_FORMAT="${OPTARG}"
         readonly DATE_FORMAT
         ;;
      s) DATE_STEP="${OPTARG}"
         readonly DATE_STEP
         ;;
      g) MOCK_FIELDS="${OPTARG}"
         readonly MOCK_FIELDS
         ;;
      o) OUTPUT_FNAME="${OPTARG}"
         readonly OUTPUT_FNAME
         ;;
      j) JSON='true'
         readonly JSON
         ;;

      h) sys_usage ;;
      ?) sys_error ;;

    esac
  done
  
  sys_debug "script parametrs: $@";

  # Get dates from positional parametrs

  shift "$((OPTIND-1))"

  [[ -n "$1" ]] && DATE_START="$1"
  [[ -n "$2" ]] && DATE_END="$2"
}

function fx_check_required_options() {

  # Check required options
  
  [[ -z "${DATE_FORMAT}" ]] && sys_error 'Option -d is required' \
                            && sys_tip "${TIP_OPTION_d}"
  [[ -z "${DATE_STEP}" ]]   && sys_error 'Option -s is required' \
                            && sys_tip "${TIP_OPTION_s}"
  [[ -z "${MOCK_FIELDS}" ]] && sys_error 'Option -g is required' \
                            && sys_tip "${TIP_OPTION_g}"

  # Check required positional parametrs

  [[ -z "${DATE_START}" ]]  && sys_error '$1 as date_start is required' \
                            && sys_tip "${TIP_OPTION_date}"
  [[ -z "${DATE_END}" ]]    && sys_error '$2 as date_end is required' \
                            && sys_tip "${TIP_OPTION_date}"


  # Abort if critical errors are here, before next step

  sys_is_abort

}

function fx_data_validation() {
  
  # Validation of tmp file

  if [[ ! -z "${OUTPUT_FNAME}" ]]; then

    if [[ -d "${OUTPUT_FNAME}" ]]; then
      sys_error 'Option -o - should be not path'
      sys_tip "${TIP_OPTION_o}"
    fi
    
    truncate --size 0 "${OUTPUT_FNAME}" 2>/dev/null
    if [[ "$?" != 0 ]]; then
      sys_error 'Option -o - can`t create test file'
      sys_tip "${TIP_OPTION_o}"
    fi

    sys_debug "Output to: ${OUTPUT_FNAME}"
  else
    sys_debug "Output to: /dev/stdout"
  fi

  # Validation of mock fields

  if [[ $(grep -o "," <<< "${MOCK_FIELDS}" | wc -l) != 3 ]]; then
    sys_error 'Option -g - not recognized format'
    sys_tip "${TIP_OPTION_g}"
  fi

  # Validation of date/time and format options

  date -d "$DATE_START" > /dev/null 2>&1
  if [[ $(echo "$?") != 0 ]]; then
    sys_error 'Start date format is not recognized'
    sys_tip "${TIP_OPTION_date}"
  fi
  
  date -d "$DATE_END" > /dev/null 2>&1
  if [[ $(echo "$?") != 0 ]]; then
    sys_error 'End date format is not recognized'
    sys_tip "${TIP_OPTION_date}"
  fi

  date -d "now" "+${DATE_FORMAT}" > /dev/null 2>&1
  if [[ $(echo "$?") != 0 ]]; then
    sys_error 'Option -d - format is not recognized'
    sys_tip "${TIP_OPTION_d}"
  fi

  # Abort program, if critical errors was

  sys_is_abort
}

# MAIN-PROGRAM FUNCTIONS

function fx_form_mock() {

  local i \
        mock_format \
        side \
        fields_count \
        fields_length \
        fields_separator \
        fields_date \
        mock_tpl
  
  # Split array

  gf="${MOCK_FIELDS}"
  mock_format=(${MOCK_FIELDS//,/ })
  
  # Fill fields parametr variables

  fields_count="${mock_format[0]}"

  if [[ "${mock_format[1]}" -eq 0 ]]; then
    fields_length=$(((RANDOM%10)+1))
  else
    fields_length="${mock_format[1]}"
  fi

  fields_separator="${mock_format[2]}"
  fields_date="${mock_format[3]}"
  
  # Form temp string with defined length
  
  mock_tpl=$(echo \
  $(for ((i=1; i<=${fields_length}; i++))
    do
      printf '%s' "${RANDOM:0:1}"
    done
    )
  )
  
  # Return string before date field

  if [[ "${1}" == "left" ]]; then
    
    [[ "${JSON}" == "true" ]] && printf '{'
    
    for ((i=1; i<${fields_date}; i++)); do
      [[ "${JSON}" == "false" ]] \
        && printf "${i}${mock_tpl}${fields_separator}" \
        || printf "\"${i}\":\"${mock_tpl}\"${fields_separator}"
    done

    [[ "${JSON}" == "true" ]] && printf '"date":"'
  
  # Return string after date field

  else
    
    [[ "${JSON}" == "true" ]] && printf '"'
   
    for ((i=$(((${fields_date}+1)));i<=${fields_count};i++)); do
      [[ "${JSON}" == 'false' ]] \
      && printf "${fields_separator}${i}${mock_tpl}" \
      || printf "${fields_separator}\"${i}\":\"${mock_tpl}\""
    done

    [[ "${JSON}" == "true" ]] && printf '}'
  fi

}

function fx_compare_fileoutput() {

  local iter_curr \
        iter_end \
        loop_cnt \
        loop_curr \
        output_file \
        items_total \
        day_sec_start \
        day_sec_offset \
        day_sec_left
  
  # For debug aims

  items_total=0

  # Set dates in unix timestamp format for iterate

  iter_curr=$(date -d "${DATE_START}" +%s)
  iter_end=$(date -d "${DATE_END}" +%s)

  # Eval first-time seconds left in first day (in seconds)
  
  day_sec_start=$(date -d "$(date -d "${DATE_START}" +%Y-%m-%d)" +%s)
  day_sec_offset=$(((${iter_curr}-${day_sec_start})))
  day_sec_left=$(((86399-${day_sec_offset})))

  # Eval first-time loop count and output file

  loop_cnt=$(((${day_sec_left}/${DATE_STEP})))
  output_file=${OUTPUT_FNAME}_$(date -d "@${iter_curr}" +%Y-%m-%d)
  truncate --size 0 "${output_file}"

  # Iterate

  loop_curr=0 

  while [[ "${iter_curr}" -le "${iter_end}" ]]; do
  
    # Define if iter_curr is at the next day

    if [[ "${loop_curr}" -gt "${loop_cnt}" ]]; then

      sys_debug "Next_day start"
      sys_debug "Added ${items_total} items to ${output_file}" 
      
      loop_curr=0
      
      # Set date to previous file

      date_touch="$(date -d "@$((($iter_curr-$DATE_STEP)))" +%Y%m%d)2359"
      touch -t "${date_touch}" ${output_file}

      # Evaluate new seconds left in new day
      
      day_sec_start=$(date -d "$(date -d "@${iter_curr}" +%Y-%m-%d)" +%s)
      day_sec_offset=$(((${iter_curr}-${day_sec_start})))
      day_sec_left=$(((86399-${day_sec_offset})))

      # Evaluate loop-count and file name for new day

      loop_cnt=$(((${day_sec_left}/${DATE_STEP})))
      output_file=${OUTPUT_FNAME}_$(date -d "@${iter_curr}" +%Y-%m-%d)
      truncate --size 0 "${output_file}"

    fi
    
    echo "${1}$(date -d "@${iter_curr}" "+${DATE_FORMAT}")${2}" >> $output_file

    ((loop_curr++))
    ((items_total++))
    ((iter_curr=${iter_curr}+${DATE_STEP}))
    
  done

  sys_debug "Total added ${items_total} items"

  date_touch="$(date -d "@$((($iter_curr-$DATE_STEP)))" +%Y%m%d)2359"
  touch -t "${date_touch}" ${output_file}

}
 
function fx_compare_stdout() {
  
  local items_total \
        iter_curr \
        iter_end
  
  i=0
  items_total=0

  # Set dates in unix timestamp format for iterate

  iter_curr=$(date -d "${DATE_START}" +%s)
  iter_end=$(date -d "${DATE_END}" +%s)

  while [[ "${iter_curr}" -le "${iter_end}" ]]; do
    
    echo "${1}$(date -d "@${iter_curr}" "+${DATE_FORMAT}")${2}"

    ((i++))
    ((items_total++))
    ((iter_curr=${iter_curr}+${DATE_STEP}))

    [[ "${i}" -eq 1000 ]] && sys_debug "Added ${items_total} items" && i=0  

  done

}

function main() {

  local mock_left \
        mock_right

  init_program_vars
  init_help_vars
  
  fx_getopts "$@"
  fx_check_required_options
  fx_data_validation

  mock_left="$(fx_form_mock "left")"
  mock_right="$(fx_form_mock "right")"
  sys_debug "Mock example: ${mock_left}&&${mock_right}"

  if [[ -n "${OUTPUT_FNAME}" ]]; then
    fx_compare_fileoutput "$mock_left" "$mock_right"
  else
    fx_compare_stdout "$mock_left" "$mock_right"
  fi

}

main "$@"
